version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: posture_db
    environment:
      POSTGRES_DB: posture_classification
      POSTGRES_USER: posture_user
      POSTGRES_PASSWORD: posture_password123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - posture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U posture_user -d posture_classification"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (캐싱 및 세션 관리용)
  redis:
    image: redis:7-alpine
    container_name: posture_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - posture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 자세 분류 웹소켓 서버
  posture_server:
    build: .
    container_name: posture_websocket_server
    ports:
      - "8000:8000"
    environment:
      - SERVER_HOST=posture_server
      - SERVER_PORT=8000
      - DATABASE_URL=postgresql://posture_user:posture_password123@postgres:5432/posture_classification
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/posture_model.pkl
      - MODEL_VERSION=1.0.0
    volumes:
      - ./자세모음:/app/자세모음:ro
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - posture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: posture_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - posture_server
    networks:
      - posture_network
    restart: unless-stopped

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: posture_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - posture_network
    restart: unless-stopped

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: posture_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - posture_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  posture_network:
    driver: bridge
