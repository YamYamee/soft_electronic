name: 자세 분류 시스템 CI/CD

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: "배포 환경"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/posture-classifier

jobs:
  # 코드 품질 검사 및 테스트
  test:
    runs-on: [self-hosted, runner]
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Python 3.13 설정
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: 캐시 설정
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 시스템 의존성 설치
        run: |
          sudo apt-get update
          # PostgreSQL 개발 헤더 (필요시에만 설치)
          # sudo apt-get install -y postgresql-server-dev-all libpq-dev build-essential

      - name: 의존성 설치
        run: |
          python -m pip install --upgrade pip
          # PostgreSQL 없이 기본 패키지만 설치
          pip install -r requirements-minimal.txt

      - name: 코드 스타일 검사
        run: |
          echo "=== Black 포맷팅 검사 ==="
          black --check --diff .
          echo "=== Isort import 정렬 검사 ==="
          isort --check-only --diff .
          echo "=== Flake8 코드 스타일 검사 ==="
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 유닛 테스트 실행
        run: |
          echo "=== 테스트 환경 설정 ==="
          # 테스트용 환경 변수 설정
          export ENVIRONMENT=test
          export LOG_LEVEL=DEBUG
          export PYTHONPATH=$PWD:$PYTHONPATH
          
          echo "=== Python 패키지 확인 ==="
          pip list | grep -E "(fastapi|httpx|pytest)"
          
          echo "=== Python 경로 확인 ==="
          python -c "import sys; print('\\n'.join(sys.path))"
          
          echo "=== 모듈 import 테스트 ==="
          python -c "from posture_classifier import PostureClassifier; print('PostureClassifier import 성공')"
          python -c "from websocket_server import app; print('websocket_server import 성공')"
          
          echo "=== 유닛 테스트 실행 ==="
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --tb=short
          
          echo "=== 테스트 결과 요약 ==="
          echo "Coverage report generated in htmlcov/"

      - name: 테스트 커버리지 업로드
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # 보안 스캔
  security-scan:
    runs-on: [self-hosted, runner]
    needs: test
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 보안 취약점 스캔
        run: |
          pip install safety bandit
          echo "=== 의존성 보안 스캔 ==="
          safety check
          echo "=== 코드 보안 스캔 ==="
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || true

      - name: 보안 리포트 업로드
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: bandit-report.json

  # Docker 이미지 빌드
  build:
    runs-on: [self-hosted, runner]
    needs: [test, security-scan]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker 이미지 빌드 및 푸시
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 스테이징 배포
  deploy-staging:
    runs-on: [self-hosted, runner]
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 환경 변수 설정
        run: |
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env
          echo "REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" >> .env
          echo "ENVIRONMENT=staging" >> .env
          echo "LOG_LEVEL=DEBUG" >> .env

      - name: Docker Compose로 스테이징 배포
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml down || true
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d

      - name: 배포 상태 확인
        run: |
          echo "=== 서비스 상태 확인 ==="
          docker-compose ps
          echo "=== 헬스체크 대기 ==="
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          echo "✅ 스테이징 배포 완료"

      - name: Slack 알림
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployment"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # 프로덕션 배포
  deploy-production:
    runs-on: [self-hosted, runner]
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 프로덕션 환경 변수 설정
        run: |
          echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> .env
          echo "REDIS_URL=${{ secrets.PROD_REDIS_URL }}" >> .env
          echo "ENVIRONMENT=production" >> .env
          echo "LOG_LEVEL=INFO" >> .env

      - name: 데이터베이스 백업
        run: |
          echo "=== 프로덕션 DB 백업 ==="
          docker exec posture_db pg_dump -U posture_user posture_classification > backup_$(date +%Y%m%d_%H%M%S).sql

      - name: Blue-Green 배포
        run: |
          echo "=== Blue-Green 배포 시작 ==="

          # 새로운 컨테이너 시작 (Green)
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale posture_server=2

          # 헬스체크 대기
          sleep 60

          # 새 인스턴스 헬스체크
          NEW_CONTAINER=$(docker ps --filter "name=posture_websocket_server" --format "{{.Names}}" | head -1)
          NEW_PORT=$(docker port $NEW_CONTAINER 8000 | cut -d: -f2)

          if curl -f http://localhost:$NEW_PORT/health; then
            echo "✅ 새 인스턴스 정상 동작"
            
            # 기존 인스턴스 제거 (Blue)
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale posture_server=1
            
            echo "✅ 프로덕션 배포 완료"
          else
            echo "❌ 새 인스턴스 헬스체크 실패"
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale posture_server=1
            exit 1
          fi

      - name: 배포 후 검증
        run: |
          echo "=== 배포 후 검증 ==="
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/ | grep "자세 분류"

          # 데이터베이스 연결 확인
          docker exec posture_db psql -U posture_user -d posture_classification -c "SELECT 1;"

          # Redis 연결 확인
          docker exec posture_redis redis-cli ping

          echo "✅ 모든 검증 통과"

      - name: 배포 성공 알림
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployment"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚀 자세 분류 시스템 프로덕션 배포 완료!
            📋 커밋: ${{ github.sha }}
            👤 배포자: ${{ github.actor }}
            🌐 URL: https://your-domain.com

  # 롤백 작업
  rollback:
    runs-on: [self-hosted, runner]
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 이전 버전으로 롤백
        run: |
          echo "=== 롤백 시작 ==="

          # 이전 이미지 태그 가져오기
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)

          # 이전 버전으로 롤백
          docker-compose down
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PREVIOUS_TAG
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$PREVIOUS_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker-compose up -d

          echo "✅ 롤백 완료: $PREVIOUS_TAG"

      - name: 롤백 알림
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: "#deployment"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ⚠️ 자세 분류 시스템 롤백 실행됨
            📋 롤백된 커밋: ${{ github.sha }}
            🔄 이전 버전으로 복구 완료
